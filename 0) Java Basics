Java as other languages need an Integrated Devalopment Environment (IDE) to run and test your codes.
There are many types in data such as
int, float, char, etc

class     - blueprint/Structure of an object
object    - instance of a class (basically a complex level of a variable)
attribute - defining the variables (int t; String s;)

In java, code must be within something called a 'class'
to use THOSE codes in some other class, we can call them as 'object' in the other class

______________________________________________________________________________________________

SYNTAXES

 ________________________________________________
| public  static   void    main(String args[]    |
|___^________^_______^_________^_________________|
 access   method  return     method name
modifier   type    type     and parameters

keywords
ACCESS MODIFIERS (can be emtpy)
Public         - access from anywhere
Private        - access only in the defined class
Protected     - access within the defined class and its subclasses

METHOD TYPE
static         - prevents the need to create an object, to call a variable from ANOTHER class
final          - prevents the updation of value, its basically locked to the given value
abstract       - when you want to redefine in different subclasses

RETURN TYPE
void           - no return value
int            - returns int value
double         – Returns a decimal value
boolean        – Returns true or false
char           – Returns a single character
String         – Returns a sequence of characters
float          – Returns a floating-point number
________________________________________________________________

Built in functions
System.out.print(<>)                  - prints the given value in the CURRENT cursor position
                                        different data types can be printed with a +

System.out.println(<>)                - prints in the CURRENT cursor position then MOVES cursor to NEXT LINE

System.out.printf(<>,<>)              - string format, followed by all variables
                                        %d for Integer
                                        %f for float and double

ScannerObj.nextInt()                  - inputs an integer
ScannerObj.nextDouble()               - inputs a double
ScannerObj.nextFloat()                - inputs a float
ScannerObj.nextLine()                 - inputs a string

Math.pow(<base>,<power>)              - to use power in calculations

.length()                             - returns length of the string/array
.charAt(<>)                           - returns value of that Index
.equals(<>)                           - compares the string directly
.compareTo(<>)                        - compares by ASCII value, returns the DIFFERENCE
.concat(<>)                           - returns 2 strings together as one
.startsWith(<>)                       - returns boolean my checking the start
.endsWith(<>)                         - returns boolean my checking the end
.indexOf(<>)                          - returns the first index of the found paramater
.replace(<>,<>)                       - replace the first argument with the 2nd at every occurance
